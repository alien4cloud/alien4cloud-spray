
- name: Ensure yorc_tls variable is defined
  set_fact:
    yorc_tls: false
  when: yorc_tls is not defined

- name: The 'yorc_tls' variable defines if yorc should be secured
  debug:
    var: yorc_tls

- name: Ensure appendable_private_domain_name variable is defined
  set_fact:
    appendable_private_domain_name: ""
  when: private_domain_name is not defined

- name: Ensure appendable_private_domain_name variable is defined and start by a '.'
  set_fact:
    appendable_private_domain_name: ".{{ private_domain_name }}"
  when: private_domain_name is defined

- name: Here is the 'appendable_private_domain_name' var value
  debug:
    var: appendable_private_domain_name

- name: Ensure ssl_ca_cert_name variable is defined
  set_fact:
    ssl_ca_cert_name: "ca-cert.pem"
  when: ssl_ca_cert_name is not defined

- name: Ensure ssl_host_key_suffix variable is defined
  set_fact:
    ssl_host_key_suffix: "-key.pem"
  when: ssl_host_key_suffix is not defined

- name: Ensure ssl_host_cert_suffix variable is defined
  set_fact:
    ssl_host_cert_suffix: "-cert.pem"
  when: ssl_host_cert_suffix is not defined

- name: Ensure the 'a4c_working_dir' variable is defined
  set_fact :
    a4c_working_dir: "{{ a4c_install_dir }}/runtime"
  when: a4c_working_dir is not defined

- name: Ensure the 'yorc_working_dir' variable is defined
  set_fact :
    yorc_working_dir: "{{ yorc_install_dir }}/runtime"
  when: yorc_working_dir is not defined

- name: Ensure a4c_ha_enabled variable is defined
  set_fact:
    a4c_ha_enabled: "{{ groups['a4c'] | length > 1 }}"

- name: Is the HA enabled ?
  debug:
    var: a4c_ha_enabled

- name: Ensure the 'offline' variable is defined
  set_fact :
    offline: false
  when: offline is not defined

- name: Ensure the 'should_use_rsync_for_a4c_ha' variable is defined
  set_fact :
    should_use_rsync_for_a4c_ha: false
  when: should_use_rsync_for_a4c_ha is not defined

- name: Ensure consul_http_port variable is defined
  set_fact:
    consul_http_port: 8500
  when: consul_http_port is not defined

- name: Ensure consul_https_port variable is defined
  set_fact:
    consul_https_port: 8501
  when: consul_https_port is not defined

- name: Ensure _consul_tls variable is defined
  set_fact:
    _consul_tls: false
  when: consul_tls is not defined

- name: Ensure _consul_tls variable is defined
  set_fact:
    _consul_tls: "{{ consul_tls }}"
  when: consul_tls is defined

- name: Detecting if consul_tls can be overriden
  set_fact:
    overriden_consul_tls: "{{ lookup('vars', '{{ consul_agent_for }}_consul_tls') }}"
  when: consul_agent_for is defined
  ignore_errors: yes

- name: Override _consul_tls
  set_fact:
    _consul_tls: "{{ overriden_consul_tls }}"
  when: overriden_consul_tls is defined

- name: The '_consul_tls' variable defines if consul http connections should be secured
  debug:
    var: _consul_tls

- name: Ensure a4c_tls variable is defined
  set_fact:
    a4c_tls: false
  when: a4c_tls is not defined

- name: The 'a4c_tls' variable defines if a4c should be secured (https)
  debug:
    var: a4c_tls

- name: Ensure a4c_protocol variable is defined
  set_fact:
    a4c_protocol: "{{ 'https' if a4c_tls else 'http' }}"

- name: Ensure should_clean_share variable is defined
  set_fact:
    should_clean_share: true
  when: should_clean_share is not defined

- name: The 'should_clean_share' variable defines if shared folder should be cleaned when mounted
  debug:
    var: should_clean_share

- name: Ensure consul_http_port variable is defined
  set_fact:
    consul_http_port: 8500
  when: consul_http_port is not defined

- name: Get the current user
  set_fact :
    consul_user: "{{ ansible_user }}"
  when: consul_user is not defined

- name: Get the consul install directory
  set_fact :
    consul_install_dir: "{{ ansible_env.HOME }}/consul"
  when: consul_install_dir is not defined
