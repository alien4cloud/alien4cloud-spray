---

- name: Get Locations for orchestrator
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations"
    method: GET
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body_format: json
    timeout: 120
    status_code: 200
  register: result

- name: Build the JSON query for searching location
  set_fact:
    query: "data[?location.name=='{{ location_name }}'].location"

- name: Intialize location
  set_fact:
    location: ""

- name: Intialize locationId
  set_fact:
    locationId: ""

- name: Search location
  set_fact:
    # TODO: better query than doesn't fail when no location found
    location: "{{ result.content | from_json |Â json_query(query) | first }}"
  ignore_errors: yes

- name: Get locationId
  set_fact:
    locationId: "{{ location.id }}"
  when: (location != "")

- name: Location found, here is the locationId
  debug:
    var : locationId
  when: (locationId != "")

- name: Create Location
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations"
    method: POST
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body:
      name: "{{ location_name }}"
      infrastructureType: "{{ location_type }}"
    body_format: json
    timeout: 120
    status_code: 201
  register: result
  when: (locationId == "")

- name: Parse request content to get locationId
  set_fact:
    content: "{{ result.content }}"
  when: (locationId == "")

- name: Export locationId
  set_fact:
    locationId: "{{ content.data }}"
  when: (locationId == "")

- name: Populate locationIds
  set_fact:
    locationIds: "{{locationIds|default([])}}  + ['{{locationId}}']"
