---

- name: Locally Check for consul entries resource file
  local_action: "stat path={{ inventory_dir }}/{{ resources_file_artifact }}"
  register: local_services_file_artifact_stat

- name: Create temporary folder
  tempfile:
    state: directory
  register: temp_dir
  when: (local_services_file_artifact_stat.stat.exists)

- name: "Upload artifact {{ inventory_dir }}/{{ resources_file_artifact }} on remote in {{ temp_dir.path }}/resources.yaml"
  template:
    src: "{{ inventory_dir }}/{{ resources_file_artifact }}"
    dest: "{{ temp_dir.path }}/resources.yaml"
  when: (local_services_file_artifact_stat.stat.exists)

- name: Slurp resources files
  slurp:
    src: "{{ temp_dir.path }}/resources.yaml"
  register: services_resources_slurped
  when: (local_services_file_artifact_stat.stat.exists)

- name: Decode resource
  set_fact:
    services_resources_yaml: "{{services_resources_slurped['content'] | b64decode | from_yaml}}"
  when: (local_services_file_artifact_stat.stat.exists)

- name: Iterate over consul key
  become: true
  become_user: "{{ a4c_user }}"
  debug:
    msg: "{{ item.Key }} : {{ item.Value | b64decode }}"
  loop: "{{ services_resources_yaml }}"


# - name: Search for existing metaproperties
#   uri:
#     url: "http://localhost:8500/v1/kv/{{ item.Key }}"
#     method: PUT
#     return_content: yes
#     validate_certs: no
#     headers:
#       Content-Type: "application/json"
#     body: "{{ item.Value | b64decode | to_json }}"
#     body_format: json
#     timeout: 120
#   loop: "{{ services_resources_yaml }}"
