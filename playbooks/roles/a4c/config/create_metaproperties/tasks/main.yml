---

- name: Locally Check for metaproperties resource file
  local_action: "stat path={{ inventory_dir }}/{{ resources_file_artifact }}"
  register: local_metaproperties_file_stat

- name: Create temporary folder
  tempfile:
    state: directory
  register: temp_dir
  when: (local_metaproperties_file_stat.stat.exists)

- name: "Upload artifact {{ inventory_dir }}/{{ resources_file_artifact }} on remote in {{ temp_dir.path }}/resources.yaml"
  copy:
    src: "{{ inventory_dir }}/{{ resources_file_artifact }}"
    dest: "{{ temp_dir.path }}/resources.yaml"
  when: (local_metaproperties_file_stat.stat.exists)

- name: Slurp metaproperties resource file
  slurp:
    src: "{{ temp_dir.path }}/resources.yaml"
  register: metaproperties_resources_slurped
  when: (local_metaproperties_file_stat.stat.exists)

- name: Parse metaproperties resource file
  set_fact:
    metaproperties_resources_yaml: "{{metaproperties_resources_slurped['content'] | b64decode | from_yaml}}"
  when: (local_metaproperties_file_stat.stat.exists)

# - debug:
#     var: metaproperties_resources_yaml

- name: Get metaproperties
  set_fact:
    metaproperties_to_create: "{{metaproperties_resources_yaml['metaproperties']}}"
  when: (local_metaproperties_file_stat.stat.exists)

- name: Here are the metaproperties to create (before filtering)
  debug:
    var: metaproperties_to_create
  when: (local_metaproperties_file_stat.stat.exists)

- name: Search for existing metaproperties
  uri:
    url: "{{ alien_url }}/rest/latest/metaproperties/search"
    method: POST
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body:
      query: ""
      from: 0
      size: 500
    body_format: json
    timeout: 120
    status_code: 200
  register: search_metaproperties_result
  when: (metaproperties_to_create is defined)

- name: Filter metaproperties (remove exiting one from the list, based on name and target)
  set_fact:
    metaproperties_to_create: |
      {% set result = [] -%}
      {% for metaproperty_to_create in metaproperties_to_create -%}
        {% set query = "data.data[? name=='" + metaproperty_to_create.name |replace("'", "\\'") + "' && target=='" + metaproperty_to_create.target + "']" -%}
        {% if search_metaproperties_result.content | from_json |Â json_query(query) | length == 0 -%}
          {% set ignored = result.extend([metaproperty_to_create]) -%}
        {%- endif %}
      {%- endfor %}
      {{ result }}
  when: (metaproperties_to_create is defined)

- name: Here are the metaproperties to create (after filtering)
  debug:
    var: metaproperties_to_create
  when: (metaproperties_to_create is defined)

- name: Create metaproperties
  uri:
    url: "{{ alien_url }}/rest/latest/metaproperties"
    method: POST
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
      Content-Type: "application/json"
    body: "{{ item | to_json }}"
    body_format: json
    timeout: 120
    status_code: 200
  register: result
  with_items: "{{metaproperties_to_create}}"
  ignore_errors: yes
  when: (local_metaproperties_file_stat.stat.exists)

- name: Finally remove temporary folder
  file:
    path: "{{ temp_dir.path }}"
    state: absent
  when: (local_metaproperties_file_stat.stat.exists)
