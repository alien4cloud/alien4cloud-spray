- name: Ensure the 'offline' variable is defined
  set_fact :
    offline: false
  when: offline is not defined

- fail:
    msg: "You can not specify an uid for a4c user that is root !"
  when: a4c_user is defined and a4c_user == "root" and a4c_uid is defined

- name: Add the user '{{ a4c_user }}' specifying uid
  user:
    name: "{{ a4c_user }}"
    create_home: true
    uid: "{{ a4c_uid }}"
    state: present
  become: true
  when: a4c_user is defined and a4c_user != "root" and a4c_uid is defined

- name: Add the user '{{ a4c_user }}'
  user:
    name: "{{ a4c_user }}"
    create_home: true
    state: present
  become: true
  when: a4c_user is defined and u4c_uid is not defined

- name: Get the current user
  set_fact :
    a4c_user: "{{ ansible_user }}"
  when: a4c_user is not defined

- name: Get the a4c install directory
  set_fact :
    a4c_install_dir: "{{ ansible_env.HOME }}/a4c"
  when: a4c_install_dir is not defined

- name: Ensure a4c directory exists
  become: true
  file:
    path: "{{ a4c_install_dir }}"
    state: directory
    owner: "{{ a4c_user }}"

- name: Ensure a4c init_backup directory exit
  become: true
  file:
    path: "{{ a4c_install_dir }}/alien4cloud/init_backup"
    state: directory
    owner: "{{ a4c_user }}"
  when: (a4c_update_backup)

- name: Ensure the 'a4c_working_dir' exists
  set_fact :
    a4c_working_dir: "{{ a4c_install_dir }}/runtime"
  when: a4c_working_dir is not defined

- name: Ensure a4c runtime directory exists
  become: true
  # we must become_user instead of use onwer since we don't want the rights to be changes (in case of samba share)
  become_user: "{{ a4c_user }}"
  file:
    path: "{{ a4c_working_dir }}"
    state: directory

- name: Ensure the 'a4c_log_dir' exists
  set_fact :
    a4c_log_dir: "{{ a4c_install_dir }}/alien4cloud/logs"
  when: a4c_log_dir is not defined

- name: "Ensure logs directory {{ a4c_log_dir }} exists"
  become: true
  file:
    path: "{{ a4c_log_dir }}"
    state: directory
    owner: "{{ a4c_user }}"

- name: Check if a4c is already installed
  stat:
    path: "{{ a4c_install_dir }}/alien4cloud/alien4cloud.sh"
  register: a4c_stat_result
  become: true
  become_user: "{{ a4c_user }}"

- name: Register a boolean indicating if A4C is already installed
  set_fact:
    a4c_installed: "{{ a4c_stat_result.stat.exists }}"

- debug:
    var: a4c_installed

- name: Fail when A4C is not installed
  fail:
    msg: "A4C does'nt seem te be installed, you cant' upgrade it !"
  when: (not a4c_installed)

# - name: Create temporary folder
#   become: true
#   become_user: "{{ a4c_user }}"
#   file:
#     path: "/tmp/upgradeA4C"
#     state: directory
#     owner: "{{ a4c_user }}"
#   register: temp_dir
- name: Create temporary folder
  become: true
  become_user: "{{ a4c_user }}"
  tempfile:
    state: directory
    suffix: upgrade_a4c
  register: temp_dir

- name: "Extract alien4cloud archive into {{ temp_dir.path }}"
  unarchive:
    src: "{{ ALIEN_DIST_URL }}"
    dest: "{{ temp_dir.path }}"
    mode: 0755
    remote_src: "{{ 'no' if offline else 'yes' }}"
  become: true
  become_user: "{{ a4c_user }}"

- name: Find upgrade A4C wars
  become: true
  become_user: "{{ a4c_user }}"
  find:
    paths: "{{ temp_dir.path }}/alien4cloud/"
    patterns: "^(.*\\-\\d\\.\\d\\.\\d-[A-Z\\d\\-]+)[^s]?[^s]?[^l]?\\.war$"
    use_regex: yes
  register: upgrade_war_files

- name: Find inplace A4C wars
  become: true
  become_user: "{{ a4c_user }}"
  find:
    paths: "{{ a4c_install_dir }}/alien4cloud/"
    patterns: "^(.*\\-\\d\\.\\d\\.\\d-[A-Z\\d\\-]+)[^s]?[^s]?[^l]?\\.war$"
    use_regex: yes
  register: inplace_war_files

- name: Fail if more than 1 war has been found (should not occur !)
  fail:
    msg: "More than one war has been found (source or target)"
  when: (upgrade_war_files.files | length != 1) or (inplace_war_files.files | length != 1)

- name: Here are the upgrade war files
  debug:
    var: upgrade_war_files.files[0].path

- name: Here are the inplace war files
  debug:
    var: inplace_war_files.files[0].path

- name: Backup old war files
  become: true
  become_user: "{{ a4c_user }}"
  command: "mv {{ inplace_war_files.files[0].path }} {{ inplace_war_files.files[0].path }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
  when: (a4c_update_backup)

- name: Add lines in changes.log
  become: true
  become_user: "{{ a4c_user }}"
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Backuped {{ inplace_war_files.files[0].path }} to {{ inplace_war_files.files[0].path }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
  when: (a4c_update_backup)

- name: Replace inplace war file
  copy:
    src: "{{ upgrade_war_files.files[0].path }}"
    remote_src: yes
    dest: "{{ inplace_war_files.files[0].path }}"
  become: true
  become_user: "{{ a4c_user }}"

- name: Add lines in changes.log
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Replaced {{ inplace_war_files.files[0].path }} by {{ upgrade_war_files.files[0].path }}"
  become: true
  become_user: "{{ a4c_user }}"

# - name: Find upgrade A4C wars (ssl)
#   become: true
#   become_user: "{{ a4c_user }}"
#   find:
#     paths: "{{ temp_dir.path }}/alien4cloud/"
#     patterns: "^(.*\\-\\d\\.\\d\\.\\d-[A-Z\\d\\-]+)\\-ssl\\.war$"
#     use_regex: yes
#   register: upgrade_war_files

# - name: Find inplace A4C wars (ssl)
#   become: true
#   become_user: "{{ a4c_user }}"
#   find:
#     paths: "{{ a4c_install_dir }}/alien4cloud/"
#     patterns: "^(.*\\-\\d\\.\\d\\.\\d-[A-Z\\d\\-]+)\\-ssl\\.war$"
#     use_regex: yes
#   register: inplace_war_files

# - name: Fail if not only 1 war has been found (should not occur !) (ssl)
#   fail:
#     msg: "Not one and only on war has been found ({{ upgrade_war_files.files | length }} upgrade_war_files found, {{ inplace_war_files.files | length }} inplace_war_files found)"
#   when: (upgrade_war_files.files | length != 1) or (inplace_war_files.files | length != 1)
#
# - name: Here are the upgrade war files (ssl)
#   debug:
#     var: upgrade_war_files.files[0].path
#
# - name: Backup old war files (ssl)
#   become: true
#   become_user: "{{ a4c_user }}"
#   command: "mv {{ inplace_war_files.files[0].path }} {{ inplace_war_files.files[0].path }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
#   when: (a4c_update_backup)
#
# - name: Add lines in changes.log
#   become: true
#   become_user: "{{ a4c_user }}"
#   lineinfile:
#     create: yes
#     path: "{{ a4c_log_dir }}/changes.log"
#     line: "{{ ansible_date_time.iso8601 }} : Backuped {{ inplace_war_files.files[0].path }} to {{ inplace_war_files.files[0].path }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
#   when: (a4c_update_backup)
#
# - name: Replace inplace war file (ssl)
#   copy:
#     src: "{{ upgrade_war_files.files[0].path }}"
#     remote_src: yes
#     dest: "{{ inplace_war_files.files[0].path }}"
#   become: true
#   become_user: "{{ a4c_user }}"
#
# - name: Add lines in changes.log
#   lineinfile:
#     create: yes
#     path: "{{ a4c_log_dir }}/changes.log"
#     line: "{{ ansible_date_time.iso8601 }} : Replaced {{ inplace_war_files.files[0].path }} by {{ upgrade_war_files.files[0].path }}"
#   become: true
#   become_user: "{{ a4c_user }}"

- name: Find upgrade plugins
  become: true
  become_user: "{{ a4c_user }}"
  find:
    paths: "{{ temp_dir.path }}/alien4cloud/init/plugins"
    patterns: "^({{ item }})-\\d\\.\\d\\.\\d-[A-Z\\d\\-]+\\.zip$"
    use_regex: yes
  register: upgrade_plugin_files
  with_items: "{{ a4c_upgrade_plugins }}"
  when: (a4c_upgrade_plugins is defined)

- name: List all plugins in upgrade archive
  become: true
  find:
    paths: "{{ temp_dir.path }}/alien4cloud/init/plugins"
    patterns: "*.zip"
  register: upgrade_plugin_ls
  when: (a4c_upgrade_plugins is not defined)

- debug:
    var: upgrade_plugin_ls
  when: (a4c_upgrade_plugins is not defined)

- name: Init a map to store a plugins
  set_fact:
    upgradePluginMap: {}

- name: Feed the map with plugins to install
  set_fact:
    upgradePluginMap: "{{ upgradePluginMap |combine({item.item: {'upgrade': item.files[0].path}}) }}"
  with_items: "{{ upgrade_plugin_files.results }}"
  when: (a4c_upgrade_plugins is defined)

- name: Feed the map with plugins to install
  set_fact:
    upgradePluginMap: "{{ upgradePluginMap |combine({item.path | basename | regex_replace('^(.*)-\\d\\.\\d\\.\\d-[A-Z\\d\\-]+\\.zip$', '\\1'): {'upgrade': item.path}}) }}"
  with_items: "{{ upgrade_plugin_ls.files }}"
  when: (a4c_upgrade_plugins is not defined)

- name: Here are the plugins to install/upgrade
  debug:
    var: upgradePluginMap

- name: Ensure init/plugins directory exists
  become: true
  file:
    path: "{{ a4c_install_dir }}/alien4cloud/init/plugins"
    state: directory
    owner: "{{ a4c_user }}"

- name: Find inplace plugins
  become: true
  become_user: "{{ a4c_user }}"
  find:
    paths: "{{ a4c_install_dir }}/alien4cloud/init/plugins"
    patterns: "^({{ item.key | replace('-', '\\-') }})\\-\\d\\.\\d\\.\\d\\-[A-Z\\d\\-]+\\.zip$"
    use_regex: yes
  register: inplace_plugin_files
  loop: "{{ upgradePluginMap | dict2items }}"

- name: Here are the inplace plugin files
  debug:
    var: inplace_plugin_files

- name: Feed the map with inplace plugins when found
  debug:
    msg: "item is : {{ item }}"
  loop: "{{ inplace_plugin_files.results }}"
  when: item.files | length > 0

- name: Feed the map with inplace plugins when found
  set_fact:
    upgradePluginMap: "{{ upgradePluginMap |combine({item.item.key: upgradePluginMap[item.item.key]|combine({'inplace': item.files[0].path})}) }}"
  loop: "{{ inplace_plugin_files.results }}"
  when: item.files | length > 0

- name: Here are the plugins to install/upgrade
  debug:
    var: upgradePluginMap

- name: Backup existing plugins when found
  become: true
  become_user: "{{ a4c_user }}"
  command: "mv {{ upgradePluginMap[item].inplace }} {{ a4c_install_dir }}/alien4cloud/init_backup/{{ upgradePluginMap[item].inplace | basename }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
  with_items: "{{ upgradePluginMap.keys() }}"
  when: (a4c_update_backup) and (upgradePluginMap[item].inplace is defined)

- name: Add lines in changes.log
  become: true
  become_user: "{{ a4c_user }}"
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Backuped {{ upgradePluginMap[item].inplace }} to {{ a4c_install_dir }}/alien4cloud/init_backup/{{ upgradePluginMap[item].inplace | basename }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
  with_items: "{{ upgradePluginMap.keys() }}"
  when: (a4c_update_backup) and (upgradePluginMap[item].inplace is defined)

- name: Upgrade plugins in init directory
  become: true
  become_user: "{{ a4c_user }}"
  copy:
    src: "{{ upgradePluginMap[item].upgrade }}"
    remote_src: yes
    dest: "{{ upgradePluginMap[item].inplace }}"
  with_items: "{{ upgradePluginMap.keys() }}"
  when: (upgradePluginMap[item].inplace is defined)

- name: Add lines in changes.log
  become: true
  become_user: "{{ a4c_user }}"
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Replaced {{ upgradePluginMap[item].inplace }} by {{ upgradePluginMap[item].upgrade }}"
  with_items: "{{ upgradePluginMap.keys() }}"
  when: (upgradePluginMap[item].inplace is defined)

- name: Install new plugins
  become: true
  become_user: "{{ a4c_user }}"
  copy:
    src: "{{ upgradePluginMap[item].upgrade }}"
    remote_src: yes
    dest: "{{ a4c_install_dir }}/alien4cloud/init/plugins/"
  with_items: "{{ upgradePluginMap.keys() }}"
  when: (upgradePluginMap[item].inplace is not defined) and (upgradePluginMap|length > 0)

- name: Add lines in changes.log
  become: true
  become_user: "{{ a4c_user }}"
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Install new plugin {{ upgradePluginMap[item].upgrade }} in {{ a4c_install_dir }}/alien4cloud/init/plugins/"
  with_items: "{{ upgradePluginMap.keys() }}"
  when: (upgradePluginMap[item].inplace is not defined) and (upgradePluginMap|length > 0)

- name: Ensure init/archives directory exists
  become: true
  file:
    path: "{{ a4c_install_dir }}/alien4cloud/init/archives"
    state: directory
    owner: "{{ a4c_user }}"

- name: List all archives in place
  become: true
  find:
    paths: "{{ a4c_install_dir }}/alien4cloud/init/archives/"
    patterns: "*.zip"
  register: inplace_archives_ls

- name: List all archives in upgrade archive
  become: true
  find:
    paths: "{{ temp_dir.path }}/alien4cloud/init/archives/"
    patterns: "*.zip"
  register: upgrade_archives_ls

- name: Backup existing archives when found
  become: true
  become_user: "{{ a4c_user }}"
  command: "mv {{ item.path }} {{ a4c_install_dir }}/alien4cloud/init_backup/{{ item.path | basename }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
  with_items: "{{ inplace_archives_ls.files }}"
  when: (a4c_update_backup)

- name: Add lines in changes.log
  become: true
  become_user: "{{ a4c_user }}"
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Backuped {{ item.path }} to {{ a4c_install_dir }}/alien4cloud/init_backup/{{ item.path | basename }}.bck{{ ansible_date_time.iso8601 | replace(':', '') }}"
  with_items: "{{ inplace_archives_ls.files }}"
  when: (a4c_update_backup)

- name: Upgrade archives in init directory
  become: true
  become_user: "{{ a4c_user }}"
  copy:
    src: "{{ item.path }}"
    remote_src: yes
    dest: "{{ a4c_install_dir }}/alien4cloud/init/archives/"
  with_items: "{{ upgrade_archives_ls.files }}"

- name: Add lines in changes.log
  become: true
  become_user: "{{ a4c_user }}"
  lineinfile:
    create: yes
    path: "{{ a4c_log_dir }}/changes.log"
    line: "{{ ansible_date_time.iso8601 }} : Upgraded {{ item.path | basename }}"
  with_items: "{{ upgrade_archives_ls.files }}"

- name: Finally remove temporary folder
  become: true
  file:
    path: "{{ temp_dir.path }}"
    state: absent
