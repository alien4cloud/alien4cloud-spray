
- fail:
    msg: "You can not specify an uid for a4c user that is root !"
  when: a4c_user is defined and a4c_user == "root" and a4c_uid is defined

- name: Add the user '{{ a4c_user }}' specifying uid
  user:
    name: "{{ a4c_user }}"
    create_home: true
    uid: "{{ a4c_uid }}"
    state: present
  become: true
  when: a4c_user is defined and a4c_user != "root" and a4c_uid is defined

- name: Add the user '{{ a4c_user }}'
  user:
    name: "{{ a4c_user }}"
    create_home: true
    state: present
  become: true
  when: a4c_user is defined and u4c_uid is not defined

- name: Get the current user
  set_fact :
    a4c_user: "{{ ansible_user }}"
  when: a4c_user is not defined

- name: Disable SSL verifications for a4c_user
  become: true
  become_user: "{{ a4c_user }}"
  template:
    src: gitconfig.j2
    dest: ~/.gitconfig
    force: yes

- name: Ensure a4c directory exists
  become: true
  file:
    path: "{{ a4c_install_dir }}"
    state: directory
    owner: "{{ a4c_user }}"

- name: Ensure a4c runtime directory exists
  become: true
  # we must become_user instead of use onwer since we don't want the rights to be changes (in case of samba share)
  become_user: "{{ a4c_user }}"
  file:
    path: "{{ a4c_working_dir }}"
    state: directory

- name: Check if a4c is already installed
  stat:
    path: "{{ a4c_install_dir }}/alien4cloud/alien4cloud.sh"
  register: a4c_stat_result
  become: true
  become_user: "{{ a4c_user }}"

- name: Register a boolean indicating if A4C is already installed
  set_fact:
    a4c_installed: "{{ a4c_stat_result.stat.exists }}"

- debug:
    var: a4c_installed

- name: Extract alien4cloud archive from remote source
  unarchive:
    src: "{{ ALIEN_DIST_URL }}"
    dest: "{{ a4c_install_dir }}"
    mode: 0755
    remote_src: yes
  become: true
  become_user: "{{ a4c_user }}"
  when: (not offline) and (not a4c_installed)

- name: Extract alien4cloud archive from local source
  unarchive:
    src: "{{ ALIEN_DIST_URL }}"
    dest: "{{ a4c_install_dir }}"
    mode: 0755
    remote_src: no
  become: true
  become_user: "{{ a4c_user }}"
  when: (offline) and (not a4c_installed)

- name: Usage of a4c jinja2 template for service creation
  template:
    src: a4c-service.j2
    dest: /etc/systemd/system/a4c.service
    mode: 0444
    force: yes
  become: true
  # when: (not a4c_installed)

- name: Reload the deamon
  systemd:
    daemon_reload: yes
  become: true
  # when: (not a4c_installed)

- name: Enable a4c service
  command: systemctl enable a4c.service
  become: true
  # when: (not a4c_installed)
