
- name: Ensure the 'offline' variable is defined
  set_fact :
    offline: false
  when: offline is not defined

- name: Instal epel-release
  yum:
    pkg: epel-release
    state: present
    update_cache: true
  become: true
  when: (not offline) and (not ((dont_install_epel is defined) and (dont_install_epel)))
  ignore_errors: yes

- name: Instal python
  yum:
    pkg: python
    state: present
    update_cache: true
  become: true
  when: (not offline)

- name: Instal python
  yum:
    pkg: python-pip
    state: present
    update_cache: true
  become: true
  when: (not offline)

- name: Install ansible
  command: pip install ansible==2.7.2
  become: true
  when: (not offline)

# - name: Instal the needed package
#   yum:
#     pkg: python-pip
#     state: present
#     update_cache: true
#   become: true
#   when: (not offline)

# - name: Install ansible
#   command: pip install ansible==2.7.2
#   become: true
#   when: (not offline)

# - name: Install ansible and all python packages
#   become: true
#   yum:
#     name: "{{ yorc_dependencies_rpm_urls }}"
#     state: present
#   when: (not offline) and (yorc_dependencies_rpm_urls is defined)

- name: Create temporary RMP directory
  tempfile:
    state: directory
    suffix: rpm
  register: temp_rpm_dir

# - name: Download RMPs into {{ temp_rpm_dir.path }}
#   get_url:
#     url: "{{ item }}"
#     dest: "{{ temp_rpm_dir.path }}"
#   with_items: "{{ yorc_dependencies_rpm_urls }}"
#   when: (not offline)

- name: Copy RPMs
  copy:
    src: "{{ inventory_dir }}/resources/bin/rpms/"
    dest: "{{ temp_rpm_dir.path }}"
  when: (offline)

- name: Locally install all RMPs found in {{ temp_rpm_dir.path }}
  shell: "yum localinstall *.rpm -y"
  args:
    chdir: "{{ temp_rpm_dir.path }}"
  become: true
  when: (offline)

- name: Remove RMPs folder
  file:
    path: "{{ temp_rpm_dir.path }}"
    state: absent

- name: Copy python and ansible
  copy:
    src: "{{ inventory_dir }}/resources/bin/python/"
    dest: /tmp/python/
  when: (offline)

- name: Get python and ansible files
  find:
    paths: /tmp/python
    excludes: readme.txt
  register: python_files
  when: (offline)

- name : Init python and ansible files list
  set_fact:
     python_list: []
  when: (offline)

- name : Build python and ansible files list
  set_fact:
     python_list: "{{ python_list + [ item.path ] }}"
  with_items: "{{python_files.files}}"
  when: (offline)

#- name: debug
#  debug:
#    var: python_list

- name: Install python and ansible
  yum:
    name: "{{python_list}}"
    state: present
  become: true
  when: (offline)

- name: Remove python folder
  file:
    path: /tmp/python
    state: absent
  when: (offline)

- name: Copy usr binaries
  copy:
    src: "{{ inventory_dir }}/resources/bin/usr/"
    dest: /tmp/usr/
  when: (offline)

- name: Get usr binaries
  find:
    paths: /tmp/usr/
    excludes: "readme.txt"
  register: usr_files
  when: (offline)

- name: Download binaries into /usr/local/bin/
  become: true
  get_url:
    url: "{{ item }}"
    dest: /usr/local/bin/
    mode: '0777'
  with_items: "{{ yorc_dependencies_usr_urls }}"
  when: (not offline) and (yorc_dependencies_usr_urls is defined)

- name: Install usr binaries
  copy:
    src: "{{ item.path }}"
    remote_src: True
    dest: /usr/local/bin/
    mode: '0777'
  become: true
  with_items: "{{ usr_files.files | sort(attribute='path') | list }}"
  when: (offline)

- name: Remove usr folder
  file:
    path: /tmp/usr/
    state: absent
  when: (offline)
