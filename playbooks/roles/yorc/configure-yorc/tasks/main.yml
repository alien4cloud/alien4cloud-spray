
- name: Ensure the work directory exists
  become: true
  become_user: "{{ yorc_user }}"
  file:
    path: "{{ yorc_working_dir }}/tmp"
    state: directory

- name: Create symbolic link to temp dir
  become: true
  become_user: "{{ yorc_user }}"
  file:
    src: "{{ yorc_working_dir }}/tmp"
    dest: "~/tmp"
    state: link

- name: Ensure the yorc_remote_ansible_tmp directory exists
  become: true
  become_user: "{{ yorc_user }}"
  file:
    path: "{{ yorc_remote_ansible_tmp }}"
    state: directory

- name: Ensure the yorc_local_ansible_tmp directory exists
  become: true
  become_user: "{{ yorc_user }}"
  file:
    path: "{{ yorc_local_ansible_tmp }}"
    state: directory

- name: Default Yorc location file
  template:
    src: config.locations.json.j2
    dest: "{{ yorc_install_dir }}/config.locations.json"
    force: yes
  become: true
  become_user: "{{ yorc_user }}"

- name: Configure Yorc
  template:
    src: config.yorc.json.j2
    dest: "{{ yorc_install_dir }}/config.yorc.json"
    force: yes
  become: true
  become_user: "{{ yorc_user }}"

- name: Slurp the Yorc config file
  slurp:
    src: "{{ yorc_install_dir }}/config.yorc.json"
  register: yorc_config
  become: true
  become_user: "{{ yorc_user }}"

- name: Extract Yorc config
  set_fact:
    yorc_config: "{{ yorc_config['content'] | b64decode }}"

- name: Locally Check for CA file
  local_action: "stat path={{ data_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }}"
  register: stat_cacert_path
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- fail:
    msg: "Yorc should be secured by no CA file found in {{ data_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }} ! Please provide CA certificate file."
  when: (yorc_tls or _consul_tls or elasticsearch_tls) and (not stat_cacert_path.stat.exists)

- name: Locally Check for Host key file
  local_action: "stat path={{ data_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
  register: stat_hostkey_path
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- fail:
    msg: "Yorc should be secured by no host key file found in {{ data_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }} ! Please provide host key file."
  when: (yorc_tls or _consul_tls or elasticsearch_tls) and (not stat_hostkey_path.stat.exists)

- name: Locally Check for Host cert file
  local_action: "stat path={{ data_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
  register: stat_hostcert_path
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- fail:
    msg: "Yorc should be secured by no host certificate file found in {{ data_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }} ! Please provide host certificate file."
  when: (yorc_tls or _consul_tls or elasticsearch_tls) and (not stat_hostcert_path.stat.exists)

- name: Creates yorc ssl directory
  file:
    path: "{{ yorc_install_dir }}/ssl"
    state: directory
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Define CA file path
  set_fact:
    ca_file_path: "{{ yorc_install_dir }}/ssl/{{ ssl_ca_cert_name }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Copy CA cert file
  copy:
    src: "{{ data_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }}"
    dest: "{{ ca_file_path }}"
    mode: "0600"
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Define host key file path
  set_fact:
    hostkey_file_path: "{{ yorc_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Copy host key file
  copy:
    src: "{{ data_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
    dest: "{{ hostkey_file_path }}"
    mode: "0600"
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Define host cert file path
  set_fact:
    hostcert_file_path: "{{ yorc_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Copy host cert file
  copy:
    src: "{{ data_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
    dest: "{{ hostcert_file_path }}"
    mode: "0600"
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls or _consul_tls or elasticsearch_tls)

- name: Add 'ssl_verify' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'ssl_verify': true}) }}"
  when: (yorc_tls)

# if yorc is behind a proxy (ie. if we have yorcfront host), then yorc will not verify host
- name: Add 'ssl_verify' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'ssl_verify': false}) }}"
  when: (yorc_tls) and (groups['yorcfront'] | length > 0)

- name: Add 'key_file' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'key_file': hostkey_file_path}) }}"
  when: (yorc_tls)

- name: Add 'cert_file' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'cert_file': hostcert_file_path}) }}"
  when: (yorc_tls)

- name: Add 'ca_file' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'ca_file': ca_file_path}) }}"
  when: (yorc_tls)

- name: Define a variable to store the yorc consul configuration
  set_fact:
    yorc_consul_config: "{{ '{ \"ssl\": true }' | from_json }}"
  when: (_consul_tls)

- name: Define a variable to store the yorc consul configuration
  set_fact:
    yorc_consul_config: "{{ '{}' | from_json }}"
  when: (not _consul_tls)

# - name: Define CA file path
#   set_fact:
#     ca_file_path: "{{ consul_install_dir }}/ssl/{{ ssl_ca_cert_name }}"
#   when: (_consul_tls)

- name: Add 'ca_cert' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'ca_cert': ca_file_path}) }}"
  when: (_consul_tls)

# - name: Define host key file path
#   set_fact:
#     hostkey_file_path: "{{ consul_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
#   when: (_consul_tls)

- name: Add 'key_file' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'key_file': hostkey_file_path}) }}"
  when: (_consul_tls)

# - name: Define host cert file path
#   set_fact:
#     hostcert_file_path: "{{ consul_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
#   when: (_consul_tls)

- name: Add 'cert_file' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'cert_file': hostcert_file_path}) }}"
  when: (_consul_tls)

- name: Define consul agent address
  set_fact:
    consulAgentIp: "{{ inventory_hostname }}{{ appendable_private_domain_name }}"

- name: Use localhost for consul agent address
  set_fact:
    consulAgentIp: "localhost"
  when: (use_localhost_for_local_connections)

- name: Define consul agent address
  set_fact:
    consul_agent_address: "{{ consulAgentIp }}:{{ consul_https_port }}"
  when: (_consul_tls)

- name: Define consul agent address
  set_fact:
    consul_agent_address: "{{ consulAgentIp }}:{{ consul_http_port }}"
  when: (not _consul_tls)

- name: Add 'address' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'address': consul_agent_address}) }}"
  # when: (_consul_tls)

- name: Add 'consul' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'consul': yorc_consul_config}) }}"
  # when: (_consul_tls)


# This part is just for elastic storage (WIP) >
- name: Init elasticsearch cluster host list
  set_fact :
    es_node_list: []

- name: Define if ES is embeded or not
  set_fact:
    es_embedded: "{{ groups['elasticsearch'] | length == 0 }}"

- name: Define ES scheme
  set_fact:
    es_scheme: "http://"

- name: Define ES scheme
  set_fact:
    es_scheme: "https://"
  when: elasticsearch_tls

- name: Loop over the a4c group (ES is embeded)
  set_fact:
    es_node_list: "{{ es_node_list + [ es_scheme + item + appendable_private_domain_name + ':' + elasticsearch_http_port|string ] }}"
  with_items: "{{ groups['a4c'] }}"
  when: es_embedded

# TODO: manage https ?
- name: Loop over the elasticsearch group
  set_fact:
    es_node_list: "{{ es_node_list + [ es_scheme + item + appendable_private_domain_name + ':' + elasticsearch_http_port|string ] }}"
  with_items: "{{ groups['elasticsearch'] }}"
  when: not es_embedded
# This part is just for elastic storage (WIP) <


- name: Create temporary folder for yorc storage config
  tempfile:
    state: directory
  register: temp_dir_yorc_storage
  when: yorc_storage_type != "default"

- name: Render Yorc storage config
  template:
    src: "config.yorc-storage-{{ yorc_storage_type }}.json.j2"
    dest: "{{ temp_dir_yorc_storage.path }}/config.yorc-storage.json"
  when: yorc_storage_type != "default"

- name: Slurp the Yorc storage config file
  slurp:
    src: "{{ temp_dir_yorc_storage.path }}/config.yorc-storage.json"
  register: yorc_config_storage
  when: yorc_storage_type != "default"

- name: Extract Yorc storage config
  set_fact:
    yorc_config_storage: "{{ yorc_config_storage['content'] | b64decode }}"
  when: yorc_storage_type != "default"

- name: Add 'storage' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine(yorc_config_storage) }}"
  when: yorc_storage_type != "default"

- name: Finally remove temporary folder
  file:
    path: "{{ temp_dir_yorc_storage.path }}"
    state: absent
  when: yorc_storage_type != "default"

- name: Debug the Yorc config before serializing it to file system
  debug:
    var: yorc_config

- name: Serialize Yorc config into {{ yorc_install_dir }}/config.yorc.json
  copy:
    content: "{{ yorc_config | to_nice_json(indent=2) }}"
    dest: "{{ yorc_install_dir }}/config.yorc.json"
  become: true
  become_user: "{{ yorc_user }}"
