---

- set_fact:
    url: "{{ alien_url }}/rest/latest/orchestrators"

- name: "Create Orchestrator {{ orchestratorName }} using {{url}}"
  uri:
    url: "{{url}}"
    method: POST
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body:
      name: "{{ orchestratorName }}"
      pluginId: "{{ pluginId }}"
      pluginBean: "{{ pluginBean }}"
    body_format: json
    status_code: 201
  register: result
  when: (orchestratorId is not defined)

- set_fact:
    content: "{{ result.content }}"
  when: (orchestratorId is not defined)

- set_fact:
    orchestratorId: "{{ content.data }}"
  when: (orchestratorId is not defined)

- name: Get orchestrator configuration
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/configuration"
    method: GET
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    status_code: 200
  register: result

- debug:
    var: result.json

- set_fact:
    content: "{{ result.content }}"
- set_fact:
    orchestratorConfiguration: "{{ content.data.configuration }}"

- debug:
    var: orchestratorConfiguration

- name: Update orchestrator deployment name pattern
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}"
    method: PUT
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
      Content-Type: "application/json"
    body:
      deploymentNamePattern: "('{{ discriminator }}-' + application.name + '-' + environment.name).replaceAll('[^\\w\\-_]', '_')"
    body_format: json
    status_code: 200
  register: result

- name: Ensure yorc_tls variable is defined
  set_fact:
    yorc_tls: false
  when: yorc_tls is not defined

- name: The 'yorc_tls' variable defines if yorc should be secured
  debug:
    var: yorc_tls

- name: Define yorc scheme to 'http'
  set_fact:
    yorc_scheme: 'http'
  when: (not yorc_tls)

- name: Define yorc scheme to 'https'
  set_fact:
    yorc_scheme: 'https'
  when: (yorc_tls)

- name: Define yorc host
  set_fact:
    yorc_host: "{{ groups['yorc'][0] }}"

- name: Use 'localhost' if a4c and yorc are single and co-hosted
  set_fact:
    yorc_host: "localhost"
  when: >
    "{{ yorc_host == inventory_hostname }}"
    and (groups['yorc'] | length == 1)
    and (groups['a4c'] | length == 1)
    and use_localhost_for_local_connections

- name: Use 'yorcfront' if exists
  set_fact:
    yorc_host: "{{ groups['yorcfront'][0] }}"
  when: "groups['yorcfront'] | length > 0"

- name: Define yorc url
  set_fact:
    yorc_url: "{{ yorc_scheme }}://{{ yorc_host }}{{ appendable_private_domain_name }}:8800"

- name: Add 'urlYorc' to orchestrator config
  set_fact:
    orchestratorConfiguration: "{{ orchestratorConfiguration|combine({'urlYorc': yorc_url}) }}"

# -------------------------
# Starting Yorc TLS section

# - name: Locally Check for CA file
#   local_action: "stat path={{ inventory_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }}"
#   register: stat_cacert_path
#   when: (yorc_tls)
#
# - fail:
#     msg: "Yorc should be secured by no CA file found in {{ inventory_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }} ! Please provide CA certificate file."
#   when: (yorc_tls) and (not stat_cacert_path.stat.exists)
#
# - name: Locally Check for Host key file
#   local_action: "stat path={{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
#   register: stat_hostkey_path
#   when: (yorc_tls)
#
# - fail:
#     msg: "Yorc should be secured by no host key file found in {{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }} ! Please provide host key file."
#   when: (yorc_tls) and (not stat_hostkey_path.stat.exists)
#
# - name: Locally Check for Host cert file
#   local_action: "stat path={{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
#   register: stat_hostcert_path
#   when: (yorc_tls)
#
# - fail:
#     msg: "Yorc should be secured by no host certificate file found in {{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }} ! Please provide host certificate file."
#   when: (yorc_tls) and (not stat_hostcert_path.stat.exists)
#
# - name: Create temporary directory to store SSL stuff
#   tempfile:
#     state: directory
#     suffix: yorc_tls
#   register: yorc_tls_tmp_dir
#   when: (yorc_tls)
#
# - name: Copy CA cert file
#   copy:
#     src: "{{ inventory_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }}"
#     dest: "{{ yorc_tls_tmp_dir.path }}/{{ ssl_ca_cert_name }}"
#   when: (yorc_tls)
#
# - name: Copy host key file
#   copy:
#     src: "{{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}-key-pkcs.pem"
#     dest: "{{ yorc_tls_tmp_dir.path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
#   when: (yorc_tls)
#
# - name: Copy host cert file
#   copy:
#     src: "{{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
#     dest: "{{ yorc_tls_tmp_dir.path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
#   when: (yorc_tls)
#
# - name: Read Certificate Authority file
#   command: /bin/cat "{{ yorc_tls_tmp_dir.path }}/{{ ssl_ca_cert_name }}"
#   register: ca_certificate_content
#   when: (yorc_tls)
#
# - name: Set ca_certificate variable
#   set_fact:
#     ca_certificate: "{{ ca_certificate_content.stdout }}"
#   when: (yorc_tls)
#
# - name: Add 'caCertificate' to orchestrator config
#   set_fact:
#     orchestratorConfiguration: "{{ orchestratorConfiguration|combine({'caCertificate': ca_certificate}) }}"
#   when: (yorc_tls)
#
# - name: Read client key file
#   command: /bin/cat "{{ yorc_tls_tmp_dir.path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
#   register: client_key_content
#   when: (yorc_tls)
#
# - name: Set client_key variable
#   set_fact:
#     client_key: "{{ client_key_content.stdout }}"
#   when: (yorc_tls)
#
# - name: Add 'clientKey' to orchestrator config
#   set_fact:
#     orchestratorConfiguration: "{{ orchestratorConfiguration|combine({'clientKey': client_key}) }}"
#   when: (yorc_tls)
#
# - name: Read client certificate file
#   command: /bin/cat "{{ yorc_tls_tmp_dir.path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
#   register: client_certificate_content
#   when: (yorc_tls)
#
# - name: Set client_certificate variable
#   set_fact:
#     client_certificate: "{{ client_certificate_content.stdout }}"
#   when: (yorc_tls)
#
# - name: Add 'clientCertificate' to orchestrator config
#   set_fact:
#     orchestratorConfiguration: "{{ orchestratorConfiguration|combine({'clientCertificate': client_certificate}) }}"
#   when: (yorc_tls)

# Ending Yorc TLS section
# -------------------------

# -------------------------
# Starting generate Yorc TLS section

# - name: Copy CA key file
#   copy:
#     src: "{{ inventory_dir }}/{{ certificates_path }}/ca-key.pem"
#     dest: "{{ yorc_tls_tmp_dir.path }}/ca-key.pem"
#   when: (yorc_tls)
#
# - name: Generate an OpenSSL private key for the plugin
#   openssl_privatekey:
#     path: "{{ yorc_tls_tmp_dir.path }}/yorc_client.key"
#   when: (yorc_tls)
#
# - name: Generate an OpenSSL CSR for the plugin
#   openssl_csr:
#     path: "{{ yorc_tls_tmp_dir.path }}/yorc_client.csr"
#     privatekey_path: "{{ yorc_tls_tmp_dir.path }}/yorc_client.key"
#     common_name: "yorcClient"
#   when: (yorc_tls)
#
# - name: Generate a OpenSSL certificate for the plugin
#   openssl_certificate:
#     path: "{{ yorc_tls_tmp_dir.path }}/yorc_client.pem"
#     csr_path: "{{ yorc_tls_tmp_dir.path }}/yorc_client.csr"
#     ownca_path: "{{ yorc_tls_tmp_dir.path }}/{{ ssl_ca_cert_name }}"
#     ownca_privatekey_path: "{{ yorc_tls_tmp_dir.path }}/ca-key.pem"
#     ownca_privatekey_passphrase: "{{ ca_passphrase }}"
#     provider: ownca
#   when: (yorc_tls)
#
# - name: Read client key file
#   command: /bin/cat "{{ yorc_tls_tmp_dir.path }}/yorc_client.key"
#   register: client_key_content
#   when: (yorc_tls)
#
# - name: Set client_key variable
#   set_fact:
#     client_key: "{{ client_key_content.stdout }}"
#   when: (yorc_tls)
#
# - name: Add 'clientKey' to orchestrator config
#   set_fact:
#     orchestratorConfiguration: "{{ orchestratorConfiguration|combine({'clientKey': client_key}) }}"
#   when: (yorc_tls)
#
# - name: Read client certificate file
#   command: /bin/cat "{{ yorc_tls_tmp_dir.path }}/yorc_client.csr"
#   register: client_certificate_content
#   when: (yorc_tls)
#
# - name: Set client_certificate variable
#   set_fact:
#     client_certificate: "{{ client_certificate_content.stdout }}"
#   when: (yorc_tls)
#
# - name: Add 'clientCertificate' to orchestrator config
#   set_fact:
#     orchestratorConfiguration: "{{ orchestratorConfiguration|combine({'clientCertificate': client_certificate}) }}"
#   when: (yorc_tls)

# Ending generate Yorc TLS section
# -------------------------

- name: Here is the Orchestrtator configuration to be set
  debug:
    var: orchestratorConfiguration

- name: Configure orchestrator
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/configuration"
    method: PUT
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
      Content-Type: "application/json"
    body: "{{ orchestratorConfiguration | to_json }}"
    body_format: json
    status_code: 200

- name: Get the orchestrator state
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}"
    method: GET
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
      Content-Type: "application/json"
    status_code: 200
  register: result
  ignore_errors: yes

- name: Define orchestrator_connected indicator
  set_fact:
    orchestrator_connected: "{{ result.json.data.state == 'CONNECTED' }}"

- name: Activate orchestrator
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/instance"
    method: POST
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
      Content-Type: "application/json"
  when: (not orchestrator_connected)

- name: Wait for orchestrator to be started
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}"
    method: GET
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
      Content-Type: "application/json"
    status_code: 200
  register: result
  until: result.json.data.state == "CONNECTED"
  retries: 10
  delay: 5
  ignore_errors: yes

- name: Here is the orchestrator state
  set_fact:
    orchestrator_state: "{{ result.json.data.state }}"

- name: Here is the orchestrator state
  debug:
    msg: "Orchestrator {{ result.json.data.id }} is in state {{ orchestrator_state }}"

- fail:
    msg: "The orchestrator #{{ orchestratorName }} is not connected ({{ orchestrator_state }}), something went wrong !"
  when: (result.json.data.state != 'CONNECTED')
