---

- set_fact:
    alien_url: "{{ a4c_protocol }}://{{ a4c_ip }}:{{ a4c_port }}"

- name: Create temporary folder
  tempfile:
    state: directory
  register: temp_dir

- set_fact:
    file_dir: "{{ temp_dir.path }}"

- name: "Ensure <{{ file_dir }}> exists"
  file:
    path: "{{ file_dir }}"
    state: directory

- name: "Upload artifact {{ inventory_dir }}/{{ resources_file_artifact }} on remote in {{ file_dir }}/resources.yaml"
  copy:
    src: "{{ inventory_dir }}/{{ resources_file_artifact }}"
    dest: "{{ file_dir }}/resources.yaml"

- name: "Stat {{ file_dir }}/resources.yaml"
  stat: path="{{ file_dir }}/resources.yaml"
  register: resources_file

- name: Slurp resources files
  slurp:
    src: "{{ file_dir }}/resources.yaml"
  register: resources_slurped
  when: resources_file.stat.exists

- set_fact:
    resources_yaml: "{{resources_slurped['content'] | b64decode | from_yaml}}"
# - debug:
#     var: resources_yaml

- set_fact:
    resources: "{{resources_yaml['resources']}}"
# - debug:
#     var: resources

- debug:
    msg: "{{item}}"
  with_items: "{{resources}}"

- name: "Login onto A4C using {{ alien_url }}/login?username={{ a4c_admin_usr }}&password={{ a4c_admin_pwd }}&submit=Login"
  uri:
    url: "{{ alien_url }}/login?username={{ a4c_admin_usr }}&password={{ a4c_admin_pwd }}&submit=Login"
    method: POST
    return_content: yes
    status_code: 302
    timeout: 120
    validate_certs: no
    headers:
      Content-Type: "application/x-www-form-urlencoded"
  register: login

- set_fact:
    session_id: "{{ login.set_cookie.split(';')[0] }}"

- name: "Create location policy using {{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/policies"
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/policies"
    method: POST
    return_content: yes
    validate_certs: no
    HEADER_cookie: "{{ session_id }}"
    body:
      resourceType: "{{ item['resourceType'] }}"
      resourceName: "{{ item['resourceName'] }}"
      archiveName: "{{ item['archiveName'] }}"
      archiveVersion: "{{ a4c_version if item['archiveVersion'] == 'a4c_version' else item['archiveVersion'] }}"
      #id: "{{ item['id'] }}"
    body_format: json
    status_code: 200
    timeout: 120
  register: result
  with_items: "{{resources}}"

# - debug:
#     var: result

- set_fact:
    resourceIds: []
- name: Populate resourceIds
  set_fact:
    resourceIds: "{{ resourceIds }}  + ['{{item['json']['data']['resourceTemplate']['id']}}']"
  with_items: "{{result['results']}}"
# - debug:
#     var: resourceIds

# Build a map with resourceId as key and resource config as entry
- set_fact:
    identifiedResourcesMap: {}
- set_fact:
    identifiedResourcesMap: "{{identifiedResourcesMap |combine({item.1: resources[item.0]})}}"
  with_indexed_items: "{{resourceIds}}"
# - debug:
#     var: identifiedResourcesMap

- name: Build an easilly iterable array of dicts containing resourceId, propertyName & propertyValue
  set_fact:
    propertyValuesPerResource: |
      {% set result = [] -%}
      {% for key in identifiedResourcesMap.keys() -%}
        {% set resource = identifiedResourcesMap[key] -%}
        {% if 'properties' in resource -%}
          {% for propertyKey in resource['properties'].keys() -%}
            {% set ignored = result.extend([{'resourceId': key, 'propertyName': propertyKey, 'propertyValue': resource['properties'][propertyKey]}]) -%}
          {%- endfor %}
        {%- endif %}
      {%- endfor %}
      {{ result }}

# - debug:
#     var: propertyValuesPerResource

- name: Configure location policy properties
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/policies/{{item['resourceId']}}/template/properties"
    method: POST
    return_content: yes
    validate_certs: no
    HEADER_cookie: "{{ session_id }}"
    body:
      propertyName: "{{item['propertyName']}}"
      propertyValue: "{{item['propertyValue']}}"
    body_format: json
    status_code: 200
    timeout: 120
  register: result
  with_items: "{{propertyValuesPerResource}}"


- name: Finally remove temporary folder
  file:
    path: "{{ temp_dir.path }}"
    state: absent
