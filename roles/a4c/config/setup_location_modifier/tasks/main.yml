---

- name: Get modifiers for orchestrator/location
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/modifiers"
    method: GET
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body_format: json
    status_code: 200
  register: result

- name: Parse the modifier list as JSON
  set_fact:
    location_modifiers: "{{ result.content | from_json }}"

# - name: Just to add array index as a property (using namespace)
#   set_fact:
#     location_modifiers: |
#       {% set result = [] -%}
#       {% set count = namespace(value=0) -%}
#       {% for modifier in location_modifiers.data -%}
#         {% set ignored = result.extend([{'pluginId': modifier['pluginId'], 'beanName': modifier['beanName'], 'phase': modifier['phase'], 'index': count.value}]) -%}
#         {% set count.value = count.value + 1 -%}
#       {%- endfor %}
#       {{ result }}

- name: Just to add array index as a property
  set_fact:
    location_modifiers: |
      {% set result = [] -%}
      {% for modifier in location_modifiers.data -%}
        {% set ignored = result.extend([{'pluginId': modifier['pluginId'], 'beanName': modifier['beanName'], 'phase': modifier['phase'], 'index': loop.index0 }]) -%}
      {%- endfor %}
      {{ result }}

- debug:
    var: location_modifiers

- name: Build the JSON query for searching location modifier for this plugin
  set_fact:
    query: "[? pluginId=='{{ pluginId }}' && beanName=='{{ beanName }}' && phase=='{{ phase }}']"

- name: override plugin_modifier to null
  set_fact:
    plugin_modifier:

- name: Search for modifier
  set_fact:
    # TODO: better query than doesn't fail when no location found
    plugin_modifier: "{{ location_modifiers | json_query(query) | first }}"
  ignore_errors: yes

- name: Here is the modifier
  debug:
    var: plugin_modifier
  when: (plugin_modifier is defined)

- name: Create location modifier since it can not be found
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/modifiers"
    method: POST
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body:
      pluginId: "{{ pluginId }}"
      beanName: "{{ beanName }}"
      phase: "{{ phase }}"
    body_format: json
    status_code: 200
  when: (plugin_modifier is not defined)

- name: Get modifiers for orchestrator/location
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/modifiers"
    method: GET
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    body_format: json
    status_code: 200
  register: result
  when: (plugin_modifier is not defined)

- name: Parse modifier list as JSON
  set_fact:
    location_modifiers: "{{ result.content | from_json }}"
  when: (plugin_modifier is not defined)

- name: Just to add array index as a property
  set_fact:
    location_modifiers: |
      {% set result = [] -%}
      {% set count = namespace(value=0) -%}
      {% for modifier in location_modifiers.data -%}
        {% set ignored = result.extend([{'pluginId': modifier['pluginId'], 'beanName': modifier['beanName'], 'phase': modifier['phase'], 'index': count.value}]) -%}
        {% set count.value = count.value + 1 -%}
      {%- endfor %}
      {{ result }}
  when: plugin_modifier is not defined

- name: Search modifier using JSON query
  set_fact:
    # TODO: better query than doesn't fail when no location found
    plugin_modifier: "{{ location_modifiers | json_query(query) | first }}"
  when: (plugin_modifier is not defined)

- name: Change location modifiers orders
  uri:
    url: "{{ alien_url }}/rest/latest/orchestrators/{{ orchestratorId }}/locations/{{ locationId }}/modifiers/from/{{ plugin_modifier.index }}/to/{{ modifier_position }}"
    method: PUT
    return_content: yes
    validate_certs: no
    headers:
      Cookie: "{{ session_id }}"
    status_code: 200
  when: (plugin_modifier.index != modifier_position)
