- name: Add the user '{{ yorc_user }}'
  user:
    name: "{{ yorc_user }}"
    # Ansible need a home for the yorc running user
    create_home: yes
    state: present
  become: true
  when: yorc_user is defined

- name: Get the current user
  set_fact :
    yorc_user: "{{ ansible_user }}"
  when: yorc_user is not defined

- name: Get the yorc install directory
  set_fact :
    yorc_install_dir: "{{ ansible_env.HOME }}/yorc"
  when: yorc_install_dir is not defined

- name: Creates terraform plugins directory
  file:
    path: /var/terraform/plugins
    state: directory
  become: true

- name: Extract terraform from remote source
  unarchive:
    src: "{{ TERRAFORM_DIST_URL }}"
    dest: /usr/local/bin/
    mode: 0755
    remote_src: yes
  become: true
  when: offline is undefined

- name: Get terraform plugins from remote source
  unarchive:
    src: "{{ item }}"
    dest: /var/terraform/plugins
    mode: 0755
    remote_src: yes
  become: true
  with_items: "{{terraform_plugins}}"
  when: offline is undefined

- name: Extract terraform from local source
  unarchive:
    src: "{{ TERRAFORM_DIST_URL }}"
    dest: /usr/local/bin/
    mode: 0755
    remote_src: no
  become: true
  when: offline is defined

- name: Copy terraform plugins
  copy:
    src: resources/bin/terraform-plugins/
    dest: /var/terraform/plugins.zip
  become: true
  when: offline is defined

- name: Get terraform plugins files list
  find:
    paths: /var/terraform/plugins.zip
    excludes: readme.txt
  register: tp_files
  when: offline is defined

- name : Init terraform plugins list
  set_fact:
     tp_list: []
  when: offline is defined

- name : Build terraform plugins list
  set_fact:
     tp_list: "{{ tp_list + [ item.path ] }}"
  with_items: "{{tp_files.files}}"
  when: offline is defined

- name : unzip terraform plugins
  unarchive:
    src: "{{ item }}"
    dest: /var/terraform/plugins
    remote_src: yes
  become: true
  with_items: "{{ tp_list }}"
  when: offline is defined

- name: Creates yorc directory
  file:
    path: "{{ yorc_install_dir }}"
    state: directory
    owner: "{{ yorc_user }}"
  become: true

- name: Creates yorc logs directory
  file:
    path: "{{ yorc_install_dir }}/logs"
    state: directory
    owner: "{{ yorc_user }}"
  become: true

- name: Check if yorc is already installed
  stat:
    path: "{{ yorc_install_dir }}/yorc"
  register: yorc_stat_result
  become: true
  become_user: "{{ yorc_user }}"

- name: Register a boolean indicating if yorc is already installed
  set_fact:
    yorc_installed: "{{ yorc_stat_result.stat.exists }}"

- name: This variable indicates if yorc is installed
  debug:
    var: yorc_installed

- name: Extract Yorc from remote source
  unarchive:
    src: "{{ YORC_DIST_URL }}"
    dest: "{{ yorc_install_dir }}"
    mode: 0755
    remote_src: yes
  become: true
  become_user: "{{ yorc_user }}"
  when: (offline is undefined) and (not yorc_installed)

- name: Extract Yorc from local source
  unarchive:
    src: "{{ YORC_DIST_URL }}"
    dest: "{{ yorc_install_dir }}"
    mode: 0755
    remote_src: no
  become: true
  become_user: "{{ yorc_user }}"
  when: (offline is defined) and (not yorc_installed)

- name: Usage of yorc jinja2 template for service creation
  template:
    src: yorc-service.j2
    dest: /etc/systemd/system/yorc.service
    mode: 0444
    force: yes
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Reload the deamon before starting the service
  systemd:
    daemon_reload: yes
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
