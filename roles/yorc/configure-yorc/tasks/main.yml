
- name: Get the yorc install directory
  set_fact :
    yorc_install_dir: "{{ ansible_env.HOME }}/yorc"
  when: yorc_install_dir is not defined

- name: Get the yorc work directory
  set_fact :
    yorc_working_dir: "{{ yorc_install_dir }}/work"
  when: yorc_working_dir is not defined

- name: Ensure the work directory exists
  become: true
  become_user: "{{ yorc_user }}"
  file:
    path: "{{ yorc_working_dir }}"
    state: directory

- name: Default Yorc location file
  template:
    src: config.locations.json.j2
    dest: "{{ yorc_install_dir }}/config.locations.json"
    force: yes
  become: true
  become_user: "{{ yorc_user }}"

- name: Configure Yorc
  template:
    src: config.yorc.json.j2
    dest: "{{ yorc_install_dir }}/config.yorc.json"
    force: yes
  become: true
  become_user: "{{ yorc_user }}"

- name: Slurp the Yorc config file
  slurp:
    src: "{{ yorc_install_dir }}/config.yorc.json"
  register: yorc_config
  become: true
  become_user: "{{ yorc_user }}"

- name: Extract Yorc config
  set_fact:
    yorc_config: "{{ yorc_config['content'] | b64decode }}"

- name: Get the consul install directory
  set_fact :
    consul_install_dir: "{{ ansible_env.HOME }}/consul"
  when: consul_install_dir is not defined

- name: Ensure yorc_tls variable is defined
  set_fact:
    yorc_tls: false
  when: yorc_tls is not defined

- name: The 'yorc_tls' variable defines if yorc should be secured
  debug:
    var: yorc_tls

- name: Locally Check for CA file
  local_action: "stat path={{ inventory_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }}"
  register: stat_cacert_path
  when: (yorc_tls)

- fail:
    msg: "Yorc should be secured by no CA file found in {{ inventory_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }} ! Please provide CA certificate file."
  when: (yorc_tls) and (not stat_cacert_path.stat.exists)

- name: Locally Check for Host key file
  local_action: "stat path={{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
  register: stat_hostkey_path
  when: (yorc_tls)

- fail:
    msg: "Yorc should be secured by no host key file found in {{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }} ! Please provide host key file."
  when: (yorc_tls) and (not stat_hostkey_path.stat.exists)

- name: Locally Check for Host cert file
  local_action: "stat path={{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
  register: stat_hostcert_path
  when: (yorc_tls)

- fail:
    msg: "Yorc should be secured by no host certificate file found in {{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }} ! Please provide host certificate file."
  when: (yorc_tls) and (not stat_hostcert_path.stat.exists)

- name: Creates yorc ssl directory
  file:
    path: "{{ yorc_install_dir }}/ssl"
    state: directory
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls)

- name: Define CA file path
  set_fact:
    ca_file_path: "{{ yorc_install_dir }}/ssl/{{ ssl_ca_cert_name }}"
  when: (yorc_tls)

- name: Copy CA cert file
  copy:
    src: "{{ inventory_dir }}/{{ certificates_path }}/{{ ssl_ca_cert_name }}"
    dest: "{{ ca_file_path }}"
    mode: "0600"
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls)

- name: Define host key file path
  set_fact:
    hostkey_file_path: "{{ yorc_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
  when: (yorc_tls)

- name: Copy host key file
  copy:
    src: "{{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
    dest: "{{ hostkey_file_path }}"
    mode: "0600"
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls)

- name: Define host cert file path
  set_fact:
    hostcert_file_path: "{{ yorc_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
  when: (yorc_tls)

- name: Copy host cert file
  copy:
    src: "{{ inventory_dir }}/{{ certificates_path }}/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
    dest: "{{ hostcert_file_path }}"
    mode: "0600"
  become: true
  become_user: "{{ yorc_user }}"
  when: (yorc_tls)

- name: Add 'ssl_verify' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'ssl_verify': true}) }}"
  when: (yorc_tls)

# if yorc is behind a proxy (ie. if we have yorcfront host), then yorc will not verify host
- name: Add 'ssl_verify' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'ssl_verify': false}) }}"
  when: (yorc_tls) and (groups['yorcfront'] | length > 0)






- name: Add 'key_file' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'key_file': hostkey_file_path}) }}"
  when: (yorc_tls)

- name: Add 'cert_file' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'cert_file': hostcert_file_path}) }}"
  when: (yorc_tls)

- name: Add 'ca_file' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'ca_file': ca_file_path}) }}"
  when: (yorc_tls)

- name: Ensure consul_tls variable is defined
  set_fact:
    consul_tls: false
  when: consul_tls is not defined

- name: The 'consul_tls' variable defines if consul http connections should be secured
  debug:
    var: consul_tls

- name: Define a variable to store the yorc consul configuration
  set_fact:
    yorc_consul_config: "{{ '{ \"ssl\": true }' | from_json }}"
  when: (consul_tls)



# - name: Define CA file path
#   set_fact:
#     ca_file_path: "{{ consul_install_dir }}/ssl/{{ ssl_ca_cert_name }}"
#   when: (consul_tls)

- name: Add 'ca_cert' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'ca_cert': ca_file_path}) }}"
  when: (consul_tls)

# - name: Define host key file path
#   set_fact:
#     hostkey_file_path: "{{ consul_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_key_suffix }}"
#   when: (consul_tls)

- name: Add 'key_file' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'key_file': hostkey_file_path}) }}"
  when: (consul_tls)

# - name: Define host cert file path
#   set_fact:
#     hostcert_file_path: "{{ consul_install_dir }}/ssl/{{ inventory_hostname }}{{ ssl_host_cert_suffix }}"
#   when: (consul_tls)

- name: Add 'cert_file' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'cert_file': hostcert_file_path}) }}"
  when: (consul_tls)

- name: Define consul agent address
  set_fact:
    consul_agent_address: "{{ inventory_hostname }}{{ appendable_private_domain_name }}:{{ consul_https_port }}"
  when: (consul_tls)

- name: Define consul agent address
  set_fact:
    consul_agent_address: "{{ inventory_hostname }}{{ appendable_private_domain_name }}:{{ consul_http_port }}"
  when: (not consul_tls)

- name: Add 'address' to yorc consul config
  set_fact:
    yorc_consul_config: "{{ yorc_consul_config|combine({'address': consul_agent_address}) }}"
  # when: (consul_tls)

- name: Add 'consul' to yorc config
  set_fact:
    yorc_config: "{{ yorc_config|combine({'consul': yorc_consul_config}) }}"
  when: (consul_tls)

- name: Debug the Yorc config before serializing it to file system
  debug:
    var: yorc_config

- name: Serialize Yorc config into {{ yorc_install_dir }}/config.yorc.json
  copy:
    content: "{{ yorc_config | to_nice_json(indent=2) }}"
    dest: "{{ yorc_install_dir }}/config.yorc.json"
  become: true
  become_user: "{{ yorc_user }}"
