
- name: Ensure ha_enabled variable is defined
  set_fact:
    ha_enabled: "{{ groups[ha_group] | length > 1 }}"

- name: Is the HA enabled ?
  debug:
    msg: "{{ groups[ha_group] }}"

- name: Is the HA enabled ?
  debug:
    var: ha_enabled

- name: Install nfs-utils
  yum:
    pkg: nfs-utils
    state: present
    update_cache: true
  become: true
  when: (ha_enabled)

- name: Ensure working_directory variable is defined
  set_fact:
    working_directory: "{{ lookup('vars', '{{ ha_group }}_working_dir') }}"
  when: (ha_enabled)

- name: Here is the working directory
  debug:
    var: working_directory
  when: (ha_enabled)

- name: Ensure working_user variable is defined
  set_fact:
    working_user: "{{ lookup('vars', '{{ ha_group }}_user') }}"
  when: (ha_enabled)

- name: Here is the working user
  debug:
    var: working_user
  when: (ha_enabled)

- name: Ensure working_uid variable is defined
  set_fact:
    working_uid: "{{ lookup('vars', '{{ ha_group }}_uid') }}"
  when: (ha_enabled)

- name: Here is the working user uid
  debug:
    var: working_uid
  when: (ha_enabled)

- name: Add the user '{{ working_user }}' specifying uid
  user:
    name: "{{ working_user }}"
    uid: "{{ working_uid }}"
    # Ansible need a home for the yorc running user
    create_home: yes
    state: present
  become: true
  when: yorc_user is defined and yorc_uid is defined

- name: Get the parent dir of the working directory
  shell: "echo $(dirname \"{{ working_directory }}\")"
  register: dirname_command_output
  when: (ha_enabled)

- name:
  set_fact:
    mount_directory: "{{ dirname_command_output.stdout }}"
  when: (ha_enabled)

- name: Here is the mount directory
  debug:
    var: mount_directory
  when: (ha_enabled)

- name: Creates NFS mount directory
  become: true
  become_user: "{{ working_user }}"
  file:
    path: "{{ mount_directory }}"
    state: directory
  when: (ha_enabled)

- name: UnMount NFS share
  become: true
  become_user: "{{ working_user }}"
  ignore_errors: yes
  shell: "umount {{ mount_directory }}"
  when: (ha_enabled)

- name: Add NFS mount in /etc/fstab
  become: true
  lineinfile:
    path: "/etc/fstab"
    line: "{{ nfs_share }} {{ mount_directory }} nfs rw,user,uid={{ working_uid }} 0 0"
  when: (ha_enabled)

- name: Mount NFS share
  become: true
  shell: "mount -av"
  when: (ha_enabled)

- name: Ensure working directory exists
  become: true
  become_user: "{{ working_user }}"
  file:
    path: "{{ working_directory }}"
    state: directory
  when: (ha_enabled)

- name: Clean the working directory
  become: true
  become_user: "{{ working_user }}"
  shell: "rm -rf {{ working_directory }}/*"
  when: (ha_enabled)
