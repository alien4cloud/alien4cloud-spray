- name: Get the current user
  set_fact :
    yorc_user: "{{ ansible_user }}"
  when: yorc_user is not defined

- name: Get the yorc install directory
  set_fact :
    yorc_install_dir: "{{ ansible_env.HOME }}/yorc"
  when: yorc_install_dir is not defined

- name: Instal the needed package
  yum:
    pkg: "{{ item }}"
    state: present
    update_cache: true
  become: true
  with_items:
    - unzip
    - https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    - python
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is undefined)
  # TODO: do same for other distrib

- name: Instal the needed package
  yum:
    pkg: "{{ item }}"
    state: present
    update_cache: true
  become: true
  with_items:
    - python-pip
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is undefined)

- name: Copy "{{ UNZIP_BIN }}"
  copy:
    src: resources/bin/{{ UNZIP_BIN }}
    dest: /tmp/unzip.rpm
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

- name: Install unzip rpm
  yum:
    name: /tmp/unzip.rpm
    state: present
  become: true
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

- name: Copy python and ansible
  copy:
    src: resources/bin/python/
    dest: /tmp/python/
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

- name: Get python and ansible files
  find:
    paths: /tmp/python
  register: python_files
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

- name : Init python and ansible files list
  set_fact:
     python_list: []
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

- name : Build python and ansible files list
  set_fact:
     python_list: "{{ python_list + [ item.path ] }}"
  with_items: "{{python_files.files}}"
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

#- name: debug
#  debug:
#    var: python_list

- name: Install python and ansible
  yum:
    name: "{{python_list}}"
    state: present
  become: true
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is defined)

- name: Install ansible
  command: pip install ansible==2.7.2
  become: true
  when: (ansible_distribution == 'CentOS' or
         ansible_distribution == 'Red Hat Enterprise Linux') and
        (local is undefined)

- name: Creates terraform plugins directory
  file:
    path: /var/terraform/plugins
    state: directory
  become: true

- name: Extract terraform from remote source
  unarchive:
    src: "{{ TERRAFORM_DIST_URL }}"
    dest: /usr/local/bin/
    mode: 0755
    remote_src: yes
  become: true
  when: local is undefined

- name: Get terraform plugins from remote source
  unarchive:
    src: "{{ item }}"
    dest: /var/terraform/plugins
    mode: 0755
    remote_src: yes
  become: true
  with_items: "{{terraform_plugins}}"
  when: local is undefined

- name: Extract terraform from local source
  unarchive:
    src: "{{ TERRAFORM_DIST_URL }}"
    dest: /usr/local/bin/
    mode: 0755
    remote_src: no
  become: true
  when: local is defined

- name: Copy terraform plugins
  copy:
    src: resources/bin/terraform-plugins/
    dest: /var/terraform/plugins.zip
  become: true
  when: local is defined

- name: Get terraform plugins files list
  find:
    paths: /var/terraform/plugins.zip
  register: tp_files
  when: local is defined

- name : Init terraform plugins list
  set_fact:
     tp_list: []
  when: local is defined

- name : Build terraform plugins list
  set_fact:
     tp_list: "{{ tp_list + [ item.path ] }}"
  with_items: "{{tp_files.files}}"
  when: local is defined

- name : unzip terraform plugins
  unarchive:
    src: "{{ item }}"
    dest: /var/terraform/plugins
    remote_src: yes
  become: true
  with_items: "{{ tp_list }}"
  when: local is defined

- name: Creates yorc directory
  file:
    path: "{{ yorc_install_dir }}"
    state: directory

- name: Creates yorc directory
  file:
    path: "{{ yorc_install_dir }}/logs"
    state: directory

- name: Extract Yorc from remote source
  unarchive:
    src: "{{ YORC_DIST_URL }}"
    dest: "{{ yorc_install_dir }}"
    mode: 0755
    remote_src: yes
  when: local is undefined

- name: Extract Yorc from local source
  unarchive:
    src: "{{ YORC_DIST_URL }}"
    dest: "{{ yorc_install_dir }}"
    mode: 0755
    remote_src: no
  when: local is defined

- name: Usage of yorc jinja2 template for service creation
  template:
    src: yorc-service.j2
    dest: /etc/systemd/system/yorc.service
    mode: 0444
    force: yes
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Reload the deamon before starting the service
  systemd:
    daemon_reload: yes
  become: true
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
